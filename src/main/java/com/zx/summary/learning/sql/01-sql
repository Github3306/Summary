=================================================== sql ==================================================
1：union 和 union all 的区别:
   1.1>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
       请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。
       SQL UNION 语法
           SELECT column_name(s) FROM table_name1
           UNION
           SELECT column_name(s) FROM table_name2
       注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。
   1.2> UNION ALL 语法
        SELECT column_name(s) FROM table_name1
        UNION ALL
        SELECT column_name(s) FROM table_name2
       另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。、
   1.3：区别
        1.3.1>union 在进行表求并集后会去掉重复的元素，所以会对所产生的结果集进行排序运算，删除重复的记录再返回结果。
        1.3.2>union all 则只是简单地将两个结果集合并后就返回结果。因此，如果返回的两个结果集中有重复的数据，那么返回的结果就会包含重复的数据。
        1.3.3>从上面的对比可以看出，在执行查询操作时，union all 要比union 快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据，那么最好使用union all

2：SQL 函数 FIND_IN_SET
   2.1> FIND_IN_SET(str,strlist)语法解释：
       2.1.1>参数说明：
             str: 要查询的字符串参数
             strlist: 查询参数字段名，该字段名以‘,’分割的形式存储，例：（1,2,3）
       2.1.2>返回结果：
             查询strlist是否包含str,如果包含返回该数据，反之则返回null.
       2.1.3>FIND_IN_SET(str,strlist)应用场景
             例如：有个表存着userId字符串,查询用户ID为‘1’的用户包含在userId字符串中的数据。这时候就要用FIND_IN_SET(str,strlist)来解决。

               例如写一个测试sql,如下语句：
               CREATE TABLE `test` (
               `id` int(8) NOT NULL auto_increment,
               `userId` varchar(255) NOT NULL,
               PRIMARY KEY (`id`)
               )
               INSERT INTO `test` VALUES (1, '1,2,3');
               INSERT INTO `test` VALUES (2, '2,3,4');
               INSERT INTO `test` VALUES (3, '1,7,9');

           查询用户ID为1包含在userId中的数据。
           SELECT * from test t WHERE FIND_IN_SET(‘1’,t.userId)
           返回结果如下：
             id   userId
             1    1,2,3
             3    1,7,9

           总结：综合上述是对Find_IN_SET 的语法的一个解释和应用场景说明，注意Find_IN_SET 是精确匹配，字段值以英文”,”分隔。

3：mybatis的escape字段     参考：https://blog.csdn.net/yh869585771/article/details/80276437

  ======================================================================
    mybatis教程参考：http://c.biancheng.net/view/4382.html
  ======================================================================

4:mybatis标签-bind
  xml映射部分:
  <select id="selectById" resultType="com.heiketu.pojo.Users">
       <bind name="abc" value="id"/>
       select * from usrs where id = #{abc}
  </select>
  bind标签中，value对应传入实体类的某个字段，name属性既给对应字段取的变量名。在value属性中可以使用字符串拼接等特殊处理。
  特殊处理:
  <bind name="xxx" value="'%'+ id + '%'"/>

5：mybatis标签--foreach                         https://www.cnblogs.com/fnlingnzb-learner/p/10566452.html

   foreach元素的属性主要有item，index，collection，open，separator，close。
   item：集合中元素迭代时的别名，该参数为必选。
   index：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选
   open：foreach代码的开始符号，一般是(和close=")"合用。常用在in(),values()时。该参数可选
   separator：元素之间的分隔符，例如在in()的时候，separator=","会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。
   close: foreach代码的关闭符号，一般是)和open="("合用。常用在in(),values()时。该参数可选。
   collection: 要做foreach的对象，作为入参时，List对象默认用"list"代替作为键，数组对象有"array"代替作为键，Map对象没有默认的键。
               当然在作为入参时可以使用@Param("keyName")来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，
               还有一种作为参数对象的某个字段的时候。举个例子：如果User有属性List ids。入参是User对象，
               那么这个collection = "ids".如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，
               那么collection = "ids.id"








