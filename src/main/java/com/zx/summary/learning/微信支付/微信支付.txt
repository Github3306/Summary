============================================微信支付==========================
1：微信支付接口调用的整体思路
   按API要求组装参数，以XML方式发送（POST）给微信支付接口（URL）,微信支付接口也是以XML方式给予响应。
   程序根据返回的结果（其中包括支付URL）生成二维码或判断订单状态。

2：在线微信支付开发文档
   https://pay.weixin.qq.com/wiki/doc/api/index.html
   提供了两种模式：
     模式一：适合线下支付
     模式二：适合在线支付

    properties
    1. appid：微信公众账号或开放平台APP的唯一标识
    2. mch_id：商户号  (配置文件中的partner)
    3. partnerkey：商户密钥
    4. sign:数字签名, 根据微信官方提供的密钥和一套算法生成的一个加密信息, 就是为了保证交易的安全性

3：开发步骤：
   1>引入依赖
   ==============================================
      <!--微信支付-->
      <dependency>
          <groupId>com.github.wxpay</groupId>
          <artifactId>wxpay-sdk</artifactId>
          <version>0.0.3</version>
      </dependency>
   ===============================================
   2>提供方法
   ===============================================
   获取随机字符串
      WXPayUtil.generateNonceStr()
   MAP转换为XML字符串（自动添加签名）
      WXPayUtil.generateSignedXml(param, partnerkey)
   XML字符串转换为MAP
      WXPayUtil.xmlToMap(result)
   ===============================================
   3>HttpClient
   ========================================================
   HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。
   HttpClient通俗的讲就是模拟了浏览器的行为，如果我们需要在后端向某一地址提交数据获取结果，就可以使用HttpClient.

   3.1>HttpClient依赖：
       ----------------------------------------------
       <!--httpclient支持-->
       <dependency>
           <groupId>org.apache.httpcomponents</groupId>
           <artifactId>httpclient</artifactId>
       </dependency>
       ----------------------------------------------
   3.2>HttpClient使用
       ----------------------------------------------
       HttpClient client=new HttpClient(请求的url地址);
       client.setHttps(true);//是否是https协议
       client.setXmlParam(xmlParam);//发送的xml数据
       client.post();//执行post请求
       String result = client.getContent(); //获取结果
       ----------------------------------------------
   =========================================================

4>支付服务搭建
   ==========================================================================================
   (1)创建changgou-service-pay
      创建支付微服务changgou-service-pay，只要实现支付相关操作。
   (2)application.yml
      创建application.yml，配置文件如下：
       server:
         port: 18092
       spring:
         application:
           name: pay
         main:
           allow-bean-definition-overriding: true
       eureka:
         client:
           service-url:
             defaultZone: http://127.0.0.1:7001/eureka
         instance:
           prefer-ip-address: true
       feign:
         hystrix:
           enabled: true
       #hystrix 配置
       hystrix:
         command:
           default:
             execution:
               timeout:
               #如果enabled设置为false，则请求超时交给ribbon控制
                 enabled: true
               isolation:
                 strategy: SEMAPHORE

       #微信支付信息配置
       weixin:
         appid: wx8397f8696b538317
         partner: 1473426802
         partnerkey: T6m9iK73b0kn9g5v426MKfHQH7X8rKwb
         notifyurl: http://www.itcast.cn //这里换成支付回调地址 controller路径

   #配置文件解析
   appid： 微信公众账号或开放平台APP的唯一标识
   partner：财付通平台的商户账号
   partnerkey：财付通平台的商户密钥
   notifyurl: 回调地址
   ==========================================================================================

5>微信支付二维码生成
  ==========================================================================================
  (1)实现思路
     我们通过HttpClient工具类实现对远程支付接口的调用。
     接口链接：https://api.mch.weixin.qq.com/pay/unifiedorder
     具体参数参见“统一下单”API, 构建参数发送给统一下单的url ，返回的信息中有支付url，根据url生成二维码，显示的订单号和金额也在返回的信息中
  (2)代码实现：
     1>业务层：
       -----------------------接口,实现类，控制层--------------------------------------------
           代码详见：维系支付--weixin
       -----------------------接口,实现类，控制层---------------------------------------------
  ==========================================================================================

6>检测支付状态
  ==========================================================================================
  (1)实现思路
     我们通过HttpClient工具类实现对远程支付接口的调用。
     接口链接：https://api.mch.weixin.qq.com/pay/orderquery
     具体参数参见“查询订单”API, 我们在controller方法中轮询调用查询订单（间隔3秒），当返回状态为success时，我们会在controller方法返回结果。前端代码收到结果后跳转到成功页面
  (2)代码实现：
     1>业务层：
       -----------------------接口,实现类，控制层--------------------------------------------
           代码详见：维系支付--weixin
       -----------------------接口,实现类，控制层---------------------------------------------
  ==========================================================================================

7>操作订单状态  系统还有个问题需要解决：支付后订单状态没有改变   MQ
  ==========================================================================================
  (1)流程
     1.用户下单之后，订单数据会存入到MySQL中，同时会将订单对应的支付日志存入到Redis，以List+Hash的方式存储。
     2.用户下单后，进入支付页面，支付页面调用支付系统，从微信支付获取二维码数据，并在页面生成支付二维码。
     3.用户扫码支付后，微信支付服务器会通调用前预留的回调地址，并携带支付状态信息。
     4.支付系统接到支付状态信息后，将支付状态信息发送给RabbitMQ
     5.订单系统监听RabbitMQ中的消息获取支付状态，并根据支付状态修改订单状态
     6.为了防止网络问题导致notifyurl没有接到对应数据，定时任务定时获取Redis中队列数据去微信支付接口查询状态，并定时更新对应状态。
  (2)实现：
     1.创建订单时，同时将订单信息放到Redis中，以List和Hash各存一份
     2.实现回调地址接收支付状态信息
     3.将订单支付状态信息发送给RabbitMQ
     4.订单系统中监听支付状态信息，如果是支付成功，修改订单状态，如果是支付失败，删除订单(或者改成支付失败)
     5.防止网络异常无法接收到回调地址的支付信息，定时任务从Redis List中读取数据判断是否支付，如果支付了，修改订单状态，如果未支付，将支付信息放入队列，下次再检测，如果支付失败删除订单(或者改成支付失败)。

  (3)Redis存储订单信息
     每次添加订单后，会根据订单检查用户是否是否支付成功，我们不建议每次都操作数据库，每次操作数据库会增加数据库的负载，我们可以选择将用户的订单信息存入一份到Redis中，提升读取速度。

     7.1>修改changgou-service-order微服务的com.changgou.order.service.impl.OrderServiceImpl类中的add方法，如果是线上支付，将用户订单数据存入到Redis中,由于每次创建二维码，需要用到订单编号 ，所以也需要将添加的订单信息返回。
         /**
          * 增加Order
          * 金额校验:后台校验
          * @param order
          */
         @Override
         public Order add(Order order){
             //...略

             //修改库存
             skuFeign.decrCount(order.getUsername());

             //添加用户积分
             userFeign.addPoints(2);

             //线上支付，记录订单
             if(order.getPayType().equalsIgnoreCase("1")){
                 //将支付记录存入到Reids namespace  key  value
                 redisTemplate.boundHashOps("Order").put(order.getId(),order);
             }

             //删除购物车信息
             //redisTemplate.delete("Cart_" + order.getUsername());

             return order;
         }
     7.2>修改com.changgou.order.controller.OrderController的add方法，将订单对象返回，因为页面需要获取订单的金额和订单号用于创建二维码

     7.3>修改订单状态
     订单支付成功后，需要修改订单状态并持久化到数据库，修改订单的同时，需要将Redis中的订单删除，所以修改订单状态需要将订单日志也传过来，实现代码如下：
     修改com.changgou.order.service.OrderService，添加修改订单状态方法，代码如下：

     /***
      * 根据订单ID修改订单状态
      * @param transactionid 交易流水号
      * @param orderId
      */
     void updateStatus(String orderId,String transactionid);
     修改com.changgou.order.service.impl.OrderServiceImpl，添加修改订单状态实现方法，代码如下：

     /***
      * 订单修改
      * @param orderId
      * @param transactionid  微信支付的交易流水号
      */
     @Override
     public void updateStatus(String orderId,String transactionid) {
         //1.修改订单
         Order order = orderMapper.selectByPrimaryKey(orderId);
         order.setUpdateTime(new Date());    //时间也可以从微信接口返回过来，这里为了方便，我们就直接使用当前时间了
         order.setPayTime(order.getUpdateTime());    //不允许这么写
         order.setTransactionId(transactionid);  //交易流水号
         order.setPayStatus("1");    //已支付
         orderMapper.updateByPrimaryKeySelective(order);

         //2.删除Redis中的订单记录
         redisTemplate.boundHashOps("Order").delete(orderId);
     }
     7.4> 删除订单
     如果用户订单支付失败了，或者支付超时了，我们需要删除用户订单，删除订单的同时需要回滚库存，这里回滚库存我们就不实现了，作为同学们的作业。实现如下：
     修改changgou-service-order的com.changgou.order.service.OrderService，添加删除订单方法，我们只需要将订单id传入进来即可实现，代码如下：

     /***
      * 删除订单操作
      * @param id
      */
     void deleteOrder(String id);
     修改changgou-service-order的com.changgou.order.service.impl.OrderServiceImpl，添加删除订单实现方法，代码如下：

     /***
      * 订单的删除操作
      */
     @Override
     public void deleteOrder(String id) {
         //改状态
         Order order = (Order) redisTemplate.boundHashOps("Order").get(id);
         order.setUpdateTime(new Date());
         order.setPayStatus("2");    //支付失败
         orderMapper.updateByPrimaryKeySelective(order);

         //删除缓存
         redisTemplate.boundHashOps("Order").delete(id);

  ==========================================================================================

8>支付信息回调
  ==========================================================================================
  (1)实现思路
     每次实现支付之后，微信支付都会将用户支付结果返回到指定路径，而指定路径是指创建二维码的时候填写的notifyurl参数,
     响应的数据以及相关文档参考一下地址：https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&index=8
  (2)代码实现：
     1>业务层：
       -----------------------接口,实现类，控制层--------------------------------------------
           代码详见：维系支付--weixin
       -----------------------接口,实现类，控制层---------------------------------------------
  ==========================================================================================



9>MQ 处理支付回调状态  MQ交换机 队列一般在后台手动创建，不使用代码的方式
  ==========================================================================================
  支付系统是独立于其他系统的服务，不做相关业务逻辑操作，只做支付处理，所以回调地址接收微信服务返回的支付状态后，
  立即将消息发送给RabbitMQ，订单系统再监听支付状态数据，根据状态数据做出修改订单状态或者删除订单操作。
  (2)实现：
     1>修改支付微服务，集成RabbitMQ，添加如下依赖
       <!--加入ampq-->
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-amqp</artifactId>
       </dependency>
     2>创建队列
         这里我们建议在后台手动创建队列，并绑定队列。如果使用程序创建队列，可以按照如下方式实现。
         修改application.yml，配置支付队列和交换机信息，代码如下：
         #位置支付交换机和队列
         mq:
           pay:
             exchange:
               order: exchange.order
             queue:
               order: queue.order
             routing:
               key: queue.order
     3>创建队列以及交换机并让队列和交换机绑定  修改com.changgou.WeixinPayApplication
        @Autowired
        private Environment env;

       /***
        * 创建DirectExchange交换机
        * @return
        */
       @Bean
       public DirectExchange basicExchange(){
           return new DirectExchange(env.getProperty("mq.pay.exchange.order"), true,false);
       }

       /***
        * 创建队列
        * @return
        */
       @Bean(name = "queueOrder")
       public Queue queueOrder(){
           return new Queue(env.getProperty("mq.pay.queue.order"), true);
       }

       /****
        * 队列绑定到交换机上
        * @return
        */
       @Bean
       public Binding basicBinding(){
           return BindingBuilder.bind(queueOrder()).to(basicExchange()).with(env.getProperty("mq.pay.routing.key"));
       }
     4>发送MQ消息

       //队列交换机信息注入
       @Value("${mq.pay.exchange.order}")
       private String exchange;
       @Value("${mq.pay.queue.order}")
       private String queue;
       @Value("${mq.pay.routing.key}")
       private String routing;

       @Autowired
       private WeixinPayService weixinPayService;

       @Autowired
       private RabbitTemplate rabbitTemplate;

       /***
        * 支付回调
        * @param request
        * @return
        */
       @RequestMapping(value = "/notify/url")
       public String notifyUrl(HttpServletRequest request){
           InputStream inStream;
           try {
               //读取支付回调数据
               inStream = request.getInputStream();
               ByteArrayOutputStream outSteam = new ByteArrayOutputStream();
               byte[] buffer = new byte[1024];
               int len = 0;
               while ((len = inStream.read(buffer)) != -1) {
                   outSteam.write(buffer, 0, len);
               }
               outSteam.close();
               inStream.close();
               // 将支付回调数据转换成xml字符串
               String result = new String(outSteam.toByteArray(), "utf-8");
               //将xml字符串转换成Map结构
               Map<String, String> map = WXPayUtil.xmlToMap(result);
               //将消息发送给RabbitMQ
               rabbitTemplate.convertAndSend(exchange,routing, JSON.toJSONString(map));

               //响应数据设置
               Map respMap = new HashMap();
               respMap.put("return_code","SUCCESS");
               respMap.put("return_msg","OK");
               return WXPayUtil.mapToXml(respMap);
           } catch (Exception e) {
               e.printStackTrace();
               //记录错误日志
           }
           return null;
       }
     5>监听MQ消息处理订单
       在订单微服务中，我们需要监听MQ支付状态消息，并实现订单数据操作
       5.1>集成RabbitMQ
           在订单微服务中，先集成RabbitMQ，再监听队列消息。
           在pom.xml中引入如下依赖：
           <!--加入ampq-->
           <dependency>
               <groupId>org.springframework.boot</groupId>
               <artifactId>spring-boot-starter-amqp</artifactId>
           </dependency>
       5.2>在application.yml中配置rabbitmq配置，代码如下
           #位置支付交换机和队列
           mq:
             pay:
               queue:
                 order: queue.order
       5.3>监听消息修改订单
           在订单微服务于中创建com.changgou.order.consumer.OrderPayMessageListener，并在该类中consumeMessage方法，用于监听消息，并根据支付状态处理订单，代码如下：
           @Component
           @RabbitListener(queues = {"${mq.pay.queue.order}"})
           public class OrderPayMessageListener {

               @Autowired
               private RedisTemplate redisTemplate;

               @Autowired
               private OrderService orderService;

               /***
                * 接收消息
                */
               @RabbitHandler
               public void consumeMessage(String msg){
                   //将数据转成Map
                   Map<String,String> result = JSON.parseObject(msg,Map.class);

                   //return_code=SUCCESS
                   String return_code = result.get("return_code");
                   //业务结果
                   String result_code = result.get("result_code");

                   //业务结果 result_code=SUCCESS/FAIL，修改订单状态
                   if(return_code.equalsIgnoreCase("success") ){
                       //获取订单号
                       String outtradeno = result.get("out_trade_no");
                       //业务结果
                       if(result_code.equalsIgnoreCase("success")){
                           if(outtradeno!=null){
                               //修改订单状态  out_trade_no
                               orderService.updateStatus(outtradeno,result.get("transaction_id"));
                           }
                       }else{
                           //订单删除
                           orderService.deleteOrder(outtradeno);
                       }
                   }

               }
           }
     5>定时处理订单状态
       在现实场景中，可能会出现这么种情况，就是用户支付后，有可能畅购服务网络不通或者服务器挂了，此时会导致回调地址无法接收到用户支付状态，这时候我们需要取微信服务器查询。所以我们之前订单信息的ID存入到了Redis队列，主要用于解决这种网络不可达造成支付状态无法回调获取的问题
       思路：
          1.每次下单，都将订单存入到Reids List队列中
          2.定时每5秒检查一次Redis 队列中是否有数据，如果有，则再去查询微信服务器支付状态
          3.如果已支付，则修改订单状态
          4.如果没有支付，是等待支付，则再将订单存入到Redis队列中，等会再次检查
          5.如果是支付失败，直接删除订单信息并修改订单状态

  ==========================================================================================
 10：rabbitmq延时队列
     延时队列即放置在该队列里面的消息是不需要立即消费的，而是等待一段时间之后取出消费。
     那么，为什么需要延迟消费呢？我们来看以下的场景
     网上商城下订单后30分钟后没有完成支付，取消订单(如：淘宝、去哪儿网)
     系统创建了预约之后，需要在预约时间到达前一小时提醒被预约的双方参会
     系统中的业务失败之后，需要重试
     这些场景都非常常见，我们可以思考，比如第二个需求，系统创建了预约之后，需要在预约时间到达前一小时提醒被预约的双方参会。那么一天之中肯定是会有很多个预约的，时间也是不一定的，假设现在有1点 2点 3点 三个预约，如何让系统知道在当前时间等于0点 1点 2点给用户发送信息呢，是不是需要一个轮询，一直去查看所有的预约，比对当前的系统时间和预约提前一小时的时间是否相等呢？这样做非常浪费资源而且轮询的时间间隔不好控制。如果我们使用延时消息队列呢，我们在创建时把需要通知的预约放入消息中间件中，并且设置该消息的过期时间，等过期时间到达时再取出消费即可。

     Rabbitmq实现延时队列一般而言有两种形式：
     第一种方式：利用两个特性： Time To Live(TTL)、Dead Letter Exchanges（DLX）[A队列过期->转发给B队列]
     第二种方式：利用rabbitmq中的插件x-delay-message

     10.1>TTL DLX实现延时队列
          1>TTL DLX介绍
              **TTL**
              RabbitMQ可以针对队列设置x-expires(则队列中所有的消息都有相同的过期时间)或者针对Message设置x-message-ttl(对消息进行单独设置，每条消息TTL可以不同)，来控制消息的生存时间，如果超时(两者同时设置以最先到期的时间为准)，则消息变为dead letter(死信)
              **Dead Letter Exchanges（DLX）**
              RabbitMQ的Queue可以配置x-dead-letter-exchange和x-dead-letter-routing-key（可选）两个参数，如果队列内出现了dead letter，则按照这两个参数重新路由转发到指定的队列。
              x-dead-letter-exchange：出现dead letter之后将dead letter重新发送到指定exchange
              x-dead-letter-routing-key：出现dead letter之后将dead letter重新按照指定的routing-key发送
          2>DLX延时队列实现
           创建工程
            创建springboot_rabbitmq_delay工程，并引入相关依赖
            <?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <parent>
                    <artifactId>changgou_parent</artifactId>
                    <groupId>com.changgou</groupId>
                    <version>1.0-SNAPSHOT</version>
                </parent>
                <modelVersion>4.0.0</modelVersion>
                <artifactId>springboot_rabbitmq_delay</artifactId>

                <dependencies>
                    <!--starter-web-->
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                    </dependency>

                    <!--加入ampq-->
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-amqp</artifactId>
                    </dependency>

                    <!--测试-->
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-test</artifactId>
                    </dependency>
                </dependencies>
            </project>

            3>application.yml配置
              spring:
                application:
                  name: springboot-demo
                rabbitmq:
                  host: 127.0.0.1
                  port: 5672
                  password: guest
                  username: guest
            4> 队列创建
               创建2个队列，用于接收消息的叫延时队列queue.message.delay，用于转发消息的队列叫queue.message，同时创建一个交换机，代码如下：
               @Configuration
               public class QueueConfig {

                   /** 短信发送队列 */
                   public static final String QUEUE_MESSAGE = "queue.message";

                   /** 交换机 */
                   public static final String DLX_EXCHANGE = "dlx.exchange";

                   /** 短信发送队列 延迟缓冲（按消息） */
                   public static final String QUEUE_MESSAGE_DELAY = "queue.message.delay";

                   /**
                    * 短信发送队列
                    * 创建Queue1 延时队列 会过期，过期后将数据发给Queue2
                    * @return
                    */
                   @Bean
                   public Queue messageQueue() {
                       return new Queue(QUEUE_MESSAGE, true);
                   }

                   /**
                    * 短信发送队列、
                    * 创建 Queue2
                    * @return
                    */
                   @Bean
                   public Queue delayMessageQueue() {
                       return QueueBuilder.durable(QUEUE_MESSAGE_DELAY)
                               .withArgument("x-dead-letter-exchange", DLX_EXCHANGE)        // 消息超时进入死信队列，绑定死信队列交换机
                               .withArgument("x-dead-letter-routing-key", QUEUE_MESSAGE)   // 绑定指定的routing-key
                               .build();
                   }

                   /***
                    * 创建交换机
                    * @return
                    */
                   @Bean
                   public DirectExchange directExchange(){
                       return new DirectExchange(DLX_EXCHANGE);
                   }


                   /***
                    * 交换机与队列绑定
                    * 队列Queue2 绑定交换机
                    * @param messageQueue
                    * @param directExchange
                    * @return
                    */
                   @Bean
                   public Binding basicBinding(Queue messageQueue, DirectExchange directExchange) {
                       return BindingBuilder.bind(messageQueue)
                               .to(directExchange)
                               .with(QUEUE_MESSAGE);
                   }
               }
            5>消息监听
              创建MessageListener用于监听消息，代码如下：
              @Component
              @RabbitListener(queues = QueueConfig.QUEUE_MESSAGE)
              public class MessageListener {


                  /***
                   * 监听消息
                   * @param msg
                   */
                  @RabbitHandler
                  public void msg(@Payload Object msg){
                      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                      System.out.println("当前时间:"+dateFormat.format(new Date()));
                      System.out.println("收到信息:"+msg);
                  }

              }
            6>创建启动类
              @SpringBootApplication
              @EnableRabbit
              public class SpringRabbitMQApplication {

                  public static void main(String[] args) {
                      SpringApplication.run(SpringRabbitMQApplication.class,args);
                  }
              }
            7> 测试
               @SpringBootTest
               @RunWith(SpringRunner.class)
               public class RabbitMQTest {

                   @Autowired
                   private RabbitTemplate rabbitTemplate;

                   /***
                    * 发送消息
                    */
                   @Test
                   public void sendMessage() throws InterruptedException, IOException {
                       SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                       System.out.println("发送当前时间:"+dateFormat.format(new Date()));
                       Map<String,String> message = new HashMap<>();
                       message.put("name","szitheima");
                       rabbitTemplate.convertAndSend(QueueConfig.QUEUE_MESSAGE_DELAY, message, new MessagePostProcessor() {
                           @Override
                           public Message postProcessMessage(Message message) throws AmqpException {
                               message.getMessageProperties().setExpiration("10000");
                               return message;
                           }
                       });

                       System.in.read();
                   }
               }
               其中message.getMessageProperties().setExpiration("10000");设置消息超时时间,超时后，会将消息转入到另外一个队列。









